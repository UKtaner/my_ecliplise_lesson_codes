@A Map is useful if you have to search, update or delete elements on the basis of a key.
@There are two interfaces for implementing Map in java: Map and SortedMap, 
and three classes: HashMap, LinkedHashMap, and TreeMap. 
@A Map doesn't allow duplicate keys, but you can have duplicate values.
HashMap and LinkedHashMap allow null keys and values, 
but TreeMap doesn't allow any null key or value.
@A Map can't be traversed, so you need to convert it into Set using keySet() or entrySet() method.



Class				Description
HashMap==>			HashMap is the implementation of Map, but it doesn't maintain any order.
LinkedHashMap==>	LinkedHashMap is the implementation of Map. It inherits HashMap class. It maintains insertion order.
TreeMap==>			TreeMap is the implementation of Map and SortedMap. It maintains ascending order.


@Map , represents a mapping between a key and a value. More specifically, a Java Map can store pairs of keys and values. 
Each key is linked to a specific value. 
Once stored in a Map , you can later look up the value using just the key.

@For example, you might want to be able to find a specific value in a list without having to look at every element individually. 
The following sections describe a special sort of collection called a Map. 
The Map is an incredibly useful sort of storage container that makes many tasks easier.